// DO NOT EDIT THIS FILE.  It is generated from protocol.txt by compile-proto.tcl.

package yak.server;

import java.util.ArrayList;
import yak.etc.Bytes;
import yak.etc.Yak;

public abstract class Proto extends Yak {

  public abstract int ClassId();

  public static final int IdAcceptToRoom = 58;
  public static final int IdDhRequest = 53;
  public static final int IdFriend = 51;
  public static final int IdInviteToRoom = 57;
  public static final int IdMember = 50;
  public static final int IdMembersOfRoom = 56;
  public static final int IdMessage = 54;
  public static final int IdPersona = 52;
  public static final int IdRoom = 49;
  public static final int IdTextMessage = 55;

  public static class AcceptToRoom extends Message {  // = 58
    public int ClassId() { return 58; }
  }

  public static class DhRequest extends Proto {  // = 53
    String dhpub;  // = 2
    String name;  // = 1
    public int ClassId() { return 53; }
  }

  public static class Friend extends Member {  // = 51
    String dhmut;  // = 9
    String remark;  // = 7
    ArrayList<Room> room = new ArrayList<Room>();  // = 8
    public int ClassId() { return 51; }
  }

  public static class InviteToRoom extends Message {  // = 57
    ArrayList<String> member_names = new ArrayList<String>();  // = 14
    public int ClassId() { return 57; }
  }

  public static class Member extends Proto {  // = 50
    String alias;  // = 3
    String contact;  // = 6
    String dhpub;  // = 4
    String hash;  // = 2
    ArrayList<String> hub = new ArrayList<String>();  // = 5
    String name;  // = 1
    public int ClassId() { return 50; }
  }

  public static class MembersOfRoom extends Message {  // = 56
    ArrayList<Member> members = new ArrayList<Member>();  // = 13
    public int ClassId() { return 56; }
  }

  public static class Message extends Proto {  // = 54
    int direction;  // = 1
    String room_name;  // = 2
    String room_owner;  // = 3
    public int ClassId() { return 54; }
  }

  public static class Persona extends Friend {  // = 52
    String dhsec;  // = 11
    ArrayList<Friend> friend = new ArrayList<Friend>();  // = 12
    public int ClassId() { return 52; }
  }

  public static class Room extends Proto {  // = 49
    ArrayList<String> member = new ArrayList<String>();  // = 4
    String name;  // = 1
    String owner;  // = 2
    String title;  // = 3
    public int ClassId() { return 49; }
  }

  public static class TextMessage extends Message {  // = 55
    String text;  // = 12
    public int ClassId() { return 55; }
  }

  public static void PickleAcceptToRoom (AcceptToRoom p, Bytes b) {  // = 58
    b.appendProtoInt (0, 58);  // Class Id 58
    b.appendProtoInt (1, p.direction);
    if (p.room_name != null) b.appendProtoString (2, p.room_name);
    if (p.room_owner != null) b.appendProtoString (3, p.room_owner);
  }


  public static void PickleDhRequest (DhRequest p, Bytes b) {  // = 53
    b.appendProtoInt (0, 53);  // Class Id 53
    if (p.name != null) b.appendProtoString (1, p.name);
    if (p.dhpub != null) b.appendProtoString (2, p.dhpub);
  }


  public static void PickleFriend (Friend p, Bytes b) {  // = 51
    b.appendProtoInt (0, 51);  // Class Id 51
    if (p.name != null) b.appendProtoString (1, p.name);
    if (p.hash != null) b.appendProtoString (2, p.hash);
    if (p.alias != null) b.appendProtoString (3, p.alias);
    if (p.dhpub != null) b.appendProtoString (4, p.dhpub);
      for (int i = 0; i < p.hub.size(); i++) {
        b.appendProtoString (5, p.hub.get(i));
      } // next i
    if (p.contact != null) b.appendProtoString (6, p.contact);
    if (p.remark != null) b.appendProtoString (7, p.remark);
      for (int i = 0; i < p.room.size(); i++) {
        if (p.room.get(i) != null) {
          Bytes b2 = new Bytes();
          PickleRoom (p.room.get(i), b2);
	      b.appendProtoBytes (8, b2);
        }
      } // next i
    if (p.dhmut != null) b.appendProtoString (9, p.dhmut);
  }


  public static void PickleInviteToRoom (InviteToRoom p, Bytes b) {  // = 57
    b.appendProtoInt (0, 57);  // Class Id 57
    b.appendProtoInt (1, p.direction);
    if (p.room_name != null) b.appendProtoString (2, p.room_name);
    if (p.room_owner != null) b.appendProtoString (3, p.room_owner);
      for (int i = 0; i < p.member_names.size(); i++) {
        b.appendProtoString (14, p.member_names.get(i));
      } // next i
  }


  public static void PickleMember (Member p, Bytes b) {  // = 50
    b.appendProtoInt (0, 50);  // Class Id 50
    if (p.name != null) b.appendProtoString (1, p.name);
    if (p.hash != null) b.appendProtoString (2, p.hash);
    if (p.alias != null) b.appendProtoString (3, p.alias);
    if (p.dhpub != null) b.appendProtoString (4, p.dhpub);
      for (int i = 0; i < p.hub.size(); i++) {
        b.appendProtoString (5, p.hub.get(i));
      } // next i
    if (p.contact != null) b.appendProtoString (6, p.contact);
  }


  public static void PickleMembersOfRoom (MembersOfRoom p, Bytes b) {  // = 56
    b.appendProtoInt (0, 56);  // Class Id 56
    b.appendProtoInt (1, p.direction);
    if (p.room_name != null) b.appendProtoString (2, p.room_name);
    if (p.room_owner != null) b.appendProtoString (3, p.room_owner);
      for (int i = 0; i < p.members.size(); i++) {
        if (p.members.get(i) != null) {
          Bytes b2 = new Bytes();
          PickleMember (p.members.get(i), b2);
	      b.appendProtoBytes (13, b2);
        }
      } // next i
  }


  public static void PickleMessage (Message p, Bytes b) {  // = 54
    b.appendProtoInt (0, 54);  // Class Id 54
    b.appendProtoInt (1, p.direction);
    if (p.room_name != null) b.appendProtoString (2, p.room_name);
    if (p.room_owner != null) b.appendProtoString (3, p.room_owner);
  }


  public static void PicklePersona (Persona p, Bytes b) {  // = 52
    b.appendProtoInt (0, 52);  // Class Id 52
    if (p.remark != null) b.appendProtoString (7, p.remark);
      for (int i = 0; i < p.room.size(); i++) {
        if (p.room.get(i) != null) {
          Bytes b2 = new Bytes();
          PickleRoom (p.room.get(i), b2);
	      b.appendProtoBytes (8, b2);
        }
      } // next i
    if (p.dhmut != null) b.appendProtoString (9, p.dhmut);
    if (p.dhsec != null) b.appendProtoString (11, p.dhsec);
      for (int i = 0; i < p.friend.size(); i++) {
        if (p.friend.get(i) != null) {
          Bytes b2 = new Bytes();
          PickleFriend (p.friend.get(i), b2);
	      b.appendProtoBytes (12, b2);
        }
      } // next i
  }


  public static void PickleRoom (Room p, Bytes b) {  // = 49
    b.appendProtoInt (0, 49);  // Class Id 49
    if (p.name != null) b.appendProtoString (1, p.name);
    if (p.owner != null) b.appendProtoString (2, p.owner);
    if (p.title != null) b.appendProtoString (3, p.title);
      for (int i = 0; i < p.member.size(); i++) {
        b.appendProtoString (4, p.member.get(i));
      } // next i
  }


  public static void PickleTextMessage (TextMessage p, Bytes b) {  // = 55
    b.appendProtoInt (0, 55);  // Class Id 55
    b.appendProtoInt (1, p.direction);
    if (p.room_name != null) b.appendProtoString (2, p.room_name);
    if (p.room_owner != null) b.appendProtoString (3, p.room_owner);
    if (p.text != null) b.appendProtoString (12, p.text);
  }


public static AcceptToRoom UnpickleAcceptToRoom (Bytes b) {  // = 58
  System.err.printf("UnpickleAcceptToRoom: %s\n", b.showProto());
  AcceptToRoom z = new AcceptToRoom ();
  while (b.len > 0) {
    int code = b.popVarInt();
    System.err.println(Fmt("Code %d:%d", code >> 3, code & 7));
    switch (code) {
      case (1 << 3) | 0: { z.direction = b.popVarInt(); }
        break;
      case (2 << 3) | 2: { z.room_name = b.popVarString(); }
        break;
      case (3 << 3) | 2: { z.room_owner = b.popVarString(); }
        break;
      case 0:  {int clsid = b.popVarInt(); if (clsid != 58) { throw new RuntimeException("Bad clsid: " + clsid); }}
      default:
        // Some day, ignore extra fields.  For now, call it an error.
        throw new RuntimeException("Bad tag code in AcceptToRoom: " + code); 
    }  // end switch
  }  // end while
  return z;
}  // end Unpickle AcceptToRoom


public static DhRequest UnpickleDhRequest (Bytes b) {  // = 53
  System.err.printf("UnpickleDhRequest: %s\n", b.showProto());
  DhRequest z = new DhRequest ();
  while (b.len > 0) {
    int code = b.popVarInt();
    System.err.println(Fmt("Code %d:%d", code >> 3, code & 7));
    switch (code) {
      case (2 << 3) | 2: { z.dhpub = b.popVarString(); }
        break;
      case (1 << 3) | 2: { z.name = b.popVarString(); }
        break;
      case 0:  {int clsid = b.popVarInt(); if (clsid != 53) { throw new RuntimeException("Bad clsid: " + clsid); }}
      default:
        // Some day, ignore extra fields.  For now, call it an error.
        throw new RuntimeException("Bad tag code in DhRequest: " + code); 
    }  // end switch
  }  // end while
  return z;
}  // end Unpickle DhRequest


public static Friend UnpickleFriend (Bytes b) {  // = 51
  System.err.printf("UnpickleFriend: %s\n", b.showProto());
  Friend z = new Friend ();
  while (b.len > 0) {
    int code = b.popVarInt();
    System.err.println(Fmt("Code %d:%d", code >> 3, code & 7));
    switch (code) {
      case (3 << 3) | 2: { z.alias = b.popVarString(); }
        break;
      case (6 << 3) | 2: { z.contact = b.popVarString(); }
        break;
      case (9 << 3) | 2: { z.dhmut = b.popVarString(); }
        break;
      case (4 << 3) | 2: { z.dhpub = b.popVarString(); }
        break;
      case (2 << 3) | 2: { z.hash = b.popVarString(); }
        break;
      case (5 << 3) | 2: { z.hub.add(b.popVarString()); }
        break;
      case (1 << 3) | 2: { z.name = b.popVarString(); }
        break;
      case (7 << 3) | 2: { z.remark = b.popVarString(); }
        break;
      case (8 << 3) | 2: {
         Bytes b2 = b.popVarBytes();
         Room p2 = UnpickleRoom (b2);
         z.room.add(p2);
      } // end case
        break;
      case 0:  {int clsid = b.popVarInt(); if (clsid != 51) { throw new RuntimeException("Bad clsid: " + clsid); }}
      default:
        // Some day, ignore extra fields.  For now, call it an error.
        throw new RuntimeException("Bad tag code in Friend: " + code); 
    }  // end switch
  }  // end while
  return z;
}  // end Unpickle Friend


public static InviteToRoom UnpickleInviteToRoom (Bytes b) {  // = 57
  System.err.printf("UnpickleInviteToRoom: %s\n", b.showProto());
  InviteToRoom z = new InviteToRoom ();
  while (b.len > 0) {
    int code = b.popVarInt();
    System.err.println(Fmt("Code %d:%d", code >> 3, code & 7));
    switch (code) {
      case (1 << 3) | 0: { z.direction = b.popVarInt(); }
        break;
      case (14 << 3) | 2: { z.member_names.add(b.popVarString()); }
        break;
      case (2 << 3) | 2: { z.room_name = b.popVarString(); }
        break;
      case (3 << 3) | 2: { z.room_owner = b.popVarString(); }
        break;
      case 0:  {int clsid = b.popVarInt(); if (clsid != 57) { throw new RuntimeException("Bad clsid: " + clsid); }}
      default:
        // Some day, ignore extra fields.  For now, call it an error.
        throw new RuntimeException("Bad tag code in InviteToRoom: " + code); 
    }  // end switch
  }  // end while
  return z;
}  // end Unpickle InviteToRoom


public static Member UnpickleMember (Bytes b) {  // = 50
  System.err.printf("UnpickleMember: %s\n", b.showProto());
  Member z = new Member ();
  while (b.len > 0) {
    int code = b.popVarInt();
    System.err.println(Fmt("Code %d:%d", code >> 3, code & 7));
    switch (code) {
      case (3 << 3) | 2: { z.alias = b.popVarString(); }
        break;
      case (6 << 3) | 2: { z.contact = b.popVarString(); }
        break;
      case (4 << 3) | 2: { z.dhpub = b.popVarString(); }
        break;
      case (2 << 3) | 2: { z.hash = b.popVarString(); }
        break;
      case (5 << 3) | 2: { z.hub.add(b.popVarString()); }
        break;
      case (1 << 3) | 2: { z.name = b.popVarString(); }
        break;
      case 0:  {int clsid = b.popVarInt(); if (clsid != 50) { throw new RuntimeException("Bad clsid: " + clsid); }}
      default:
        // Some day, ignore extra fields.  For now, call it an error.
        throw new RuntimeException("Bad tag code in Member: " + code); 
    }  // end switch
  }  // end while
  return z;
}  // end Unpickle Member


public static MembersOfRoom UnpickleMembersOfRoom (Bytes b) {  // = 56
  System.err.printf("UnpickleMembersOfRoom: %s\n", b.showProto());
  MembersOfRoom z = new MembersOfRoom ();
  while (b.len > 0) {
    int code = b.popVarInt();
    System.err.println(Fmt("Code %d:%d", code >> 3, code & 7));
    switch (code) {
      case (1 << 3) | 0: { z.direction = b.popVarInt(); }
        break;
      case (13 << 3) | 2: {
         Bytes b2 = b.popVarBytes();
         Member p2 = UnpickleMember (b2);
         z.members.add(p2);
      } // end case
        break;
      case (2 << 3) | 2: { z.room_name = b.popVarString(); }
        break;
      case (3 << 3) | 2: { z.room_owner = b.popVarString(); }
        break;
      case 0:  {int clsid = b.popVarInt(); if (clsid != 56) { throw new RuntimeException("Bad clsid: " + clsid); }}
      default:
        // Some day, ignore extra fields.  For now, call it an error.
        throw new RuntimeException("Bad tag code in MembersOfRoom: " + code); 
    }  // end switch
  }  // end while
  return z;
}  // end Unpickle MembersOfRoom


public static Message UnpickleMessage (Bytes b) {  // = 54
  System.err.printf("UnpickleMessage: %s\n", b.showProto());
  Message z = new Message ();
  while (b.len > 0) {
    int code = b.popVarInt();
    System.err.println(Fmt("Code %d:%d", code >> 3, code & 7));
    switch (code) {
      case (1 << 3) | 0: { z.direction = b.popVarInt(); }
        break;
      case (2 << 3) | 2: { z.room_name = b.popVarString(); }
        break;
      case (3 << 3) | 2: { z.room_owner = b.popVarString(); }
        break;
      case 0:  {int clsid = b.popVarInt(); if (clsid != 54) { throw new RuntimeException("Bad clsid: " + clsid); }}
      default:
        // Some day, ignore extra fields.  For now, call it an error.
        throw new RuntimeException("Bad tag code in Message: " + code); 
    }  // end switch
  }  // end while
  return z;
}  // end Unpickle Message


public static Persona UnpicklePersona (Bytes b) {  // = 52
  System.err.printf("UnpicklePersona: %s\n", b.showProto());
  Persona z = new Persona ();
  while (b.len > 0) {
    int code = b.popVarInt();
    System.err.println(Fmt("Code %d:%d", code >> 3, code & 7));
    switch (code) {
      case (9 << 3) | 2: { z.dhmut = b.popVarString(); }
        break;
      case (11 << 3) | 2: { z.dhsec = b.popVarString(); }
        break;
      case (12 << 3) | 2: {
         Bytes b2 = b.popVarBytes();
         Friend p2 = UnpickleFriend (b2);
         z.friend.add(p2);
      } // end case
        break;
      case (7 << 3) | 2: { z.remark = b.popVarString(); }
        break;
      case (8 << 3) | 2: {
         Bytes b2 = b.popVarBytes();
         Room p2 = UnpickleRoom (b2);
         z.room.add(p2);
      } // end case
        break;
      case 0:  {int clsid = b.popVarInt(); if (clsid != 52) { throw new RuntimeException("Bad clsid: " + clsid); }}
      default:
        // Some day, ignore extra fields.  For now, call it an error.
        throw new RuntimeException("Bad tag code in Persona: " + code); 
    }  // end switch
  }  // end while
  return z;
}  // end Unpickle Persona


public static Room UnpickleRoom (Bytes b) {  // = 49
  System.err.printf("UnpickleRoom: %s\n", b.showProto());
  Room z = new Room ();
  while (b.len > 0) {
    int code = b.popVarInt();
    System.err.println(Fmt("Code %d:%d", code >> 3, code & 7));
    switch (code) {
      case (4 << 3) | 2: { z.member.add(b.popVarString()); }
        break;
      case (1 << 3) | 2: { z.name = b.popVarString(); }
        break;
      case (2 << 3) | 2: { z.owner = b.popVarString(); }
        break;
      case (3 << 3) | 2: { z.title = b.popVarString(); }
        break;
      case 0:  {int clsid = b.popVarInt(); if (clsid != 49) { throw new RuntimeException("Bad clsid: " + clsid); }}
      default:
        // Some day, ignore extra fields.  For now, call it an error.
        throw new RuntimeException("Bad tag code in Room: " + code); 
    }  // end switch
  }  // end while
  return z;
}  // end Unpickle Room


public static TextMessage UnpickleTextMessage (Bytes b) {  // = 55
  System.err.printf("UnpickleTextMessage: %s\n", b.showProto());
  TextMessage z = new TextMessage ();
  while (b.len > 0) {
    int code = b.popVarInt();
    System.err.println(Fmt("Code %d:%d", code >> 3, code & 7));
    switch (code) {
      case (1 << 3) | 0: { z.direction = b.popVarInt(); }
        break;
      case (2 << 3) | 2: { z.room_name = b.popVarString(); }
        break;
      case (3 << 3) | 2: { z.room_owner = b.popVarString(); }
        break;
      case (12 << 3) | 2: { z.text = b.popVarString(); }
        break;
      case 0:  {int clsid = b.popVarInt(); if (clsid != 55) { throw new RuntimeException("Bad clsid: " + clsid); }}
      default:
        // Some day, ignore extra fields.  For now, call it an error.
        throw new RuntimeException("Bad tag code in TextMessage: " + code); 
    }  // end switch
  }  // end while
  return z;
}  // end Unpickle TextMessage


  public final Proto Unpickle(Bytes b) {
    if (b.arr[b.off] == 0) {
      int clsid = b.arr[b.off + 1];  // HACK works for clsid < 128
      switch (clsid) {
        case 58 : return UnpickleAcceptToRoom (b);
        case 53 : return UnpickleDhRequest (b);
        case 51 : return UnpickleFriend (b);
        case 57 : return UnpickleInviteToRoom (b);
        case 50 : return UnpickleMember (b);
        case 56 : return UnpickleMembersOfRoom (b);
        case 54 : return UnpickleMessage (b);
        case 52 : return UnpicklePersona (b);
        case 49 : return UnpickleRoom (b);
        case 55 : return UnpickleTextMessage (b);
      }
      throw new RuntimeException("Bad cls id in Proto.Unpickle: " + clsid); 
    }
    throw new RuntimeException("Missing cls id in Proto.Unpickle");
  }

}
